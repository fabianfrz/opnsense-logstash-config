filter {
  if "network-firewall" in [#source] and ![@metadata][skip_ls_filter] {
    grok {
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      remove_field => [ "message" ]
    }
    syslog_pri {
      syslog_pri_field_name => "syslog_pri"
      remove_field => [
        "syslog_pri"
      ]
    }
    mutate {
      remove_field => [
        "syslog_facility_code",
        "syslog_severity"
      ]
      rename => {
        "syslog_severity_code" => "severity"
      }
    }
    mutate { strip => ["syslog_message"] }
    if [syslog_program] == "devd" {
      # if "!system=CAM" in [syslog_message] {
      #   grok {
      #     match => {"syslog_message" => "Processing event %{QUOTEDSTRING:data}"}
      #     remove_field => [ "syslog_message" ]
      #   }
      #   kv {
      #     source => "data"
      #     remove_field => [ "data" ]
      #   }
      # }
      drop { }
    }
    if [syslog_program] == "filterlog" {
      opnsensefilter {
        field_name => "syslog_message"
        remove_field => [ "syslog_message" ]
      }
    }
    if [syslog_program] == "opnsense" {
      if "for" in [syslog_message] and "from" in [syslog_message] {
        mutate { add_field => {'os_type' => 'auth'} }
        if "from:" in [syslog_message] {
          grok {
            match => {
              "syslog_message" => "%{DATA:scriptname}: %{DATA:login_status} for user '%{USERNAME:username}' from: %{DATA:ip}"
            }
          }
        }
        else {
          grok {
            match => {
              "syslog_message" => "%{DATA:scriptname}: %{DATA:login_status} for '%{USERNAME:username}' from %{DATA:ip}"
            }
          }
        }
      }
    }
    if [syslog_program] == "configd.py" {
      if "message" in ["syslog_message"] {
        grok {
          match => {
            "syslog_message" => "message %{UUID:uuid} \[%{DATA:action_name}\] returned %{WORD:status_word}.*"
          }
          remove_field => [ "syslog_message" ]
        }
      }
      if [syslog_message] =~ "^\[.+?\]" {
        grok {
          match => {"syslog_message" => "\[%{UUID:uuid}\] %{GREEDYDATA:message}"}
          remove_field => [ "syslog_message" ]
        }
      }
      if [syslog_message] =~ "^\S+* generated \S+$" {
        grok {
          match => {"syslog_message" => "^%{NOTSPACE:component_name} generated %{NOTSPACE:file_name}$"}
          remove_field => [ "syslog_message" ]
        }
      }
    }
    if [syslog_program] == "/usr/sbin/cron" {
      grok {
        match => {"syslog_message" => "\(%{USER:user}\) CMD %{GREEDYDATA:message}"}
        remove_field => [ "syslog_message" ]
      }
    }
    if [syslog_program] == "dhcpd" {
      grok {
        match => {"syslog_message" => "%{WORD:message}(?: (?:for|on) %{IP:src_ip}(?: \(%{IP:dhcp_relay_ip}\))?)? (:?from|to) %{MAC:src_mac} via %{WORD:src_interface}"}
        remove_field => [ "syslog_message" ]
      }
    }
    if [syslog_program] in ["ospfd", "ospf6d"] {
      if ":" in [syslog_message] {
        grok {
          match => {"syslog_message" => "%{DATA:component}: %{GREEDYDATA:message}"}
          remove_field => [ "syslog_message" ]
        }
      }
      if ":" in [message] and "# Areas" not in [message] {
        grok {
          match => {"message" => "%{DATA:subcomponent}: %{GREEDYDATA:message}"}
          overwrite => [ "message" ]
        }
      }
      if [syslog_message] =~ /^\S+\(\S+\).*/ {
        grok {
          match => {"syslog_message" => "%{NOTSPACE:component}\(%{NOTSPACE:function_name}\) %{GREEDYDATA:message}"}
          remove_field => [ "syslog_message" ]
        }
      }
      if [component] == "SPF" {
        grok {
          match => {"message" => "Scheduled in %{NUMBER:scheduled} msec"}
        }
      }
      if [component] == "SPF processing" {
        grok {
          match => {"message" => "# Areas: %{NUMBER:number_areas}, SPF runtime: %{NUMBER:runtime_sec} sec %{NUMBER:runtime_usec} usec, Reason: %{GREEDYDATA:reason}"}
        }
      }

    }
      #"SPF processing: # Areas: 1, SPF runtime: 0 sec 0 usec, Reason: R+, R-"
      #"OSPF6d (Quagga-1.2.1 ospf6d-0.9.7r) starts: vty@2606"
    if [syslog_program] == "zebra" {
      #"client 18 says hello and bids fair to announce only ospf6 routes"
    }

    mutate {
      remove_field => [
        ## Do not parse timestamp in the original log message and just use the
        ## timestamp when the event entered Logstash.
        "#logstash_timestamp"
        # "syslog_timestamp"
      ]
    }

    ## Proposal by ypid. Comment out if you have other preferences.
    mutate {
      rename => {
        "message"         => "msg"

        "spt"             => "src_port"
        "dpt"             => "dst_port"
        "source"          => "src_ip"
        "destination"     => "dst_ip"
        "input_interface" => "src_interface"
        "length"          => "sent_byte"
      }
    }

    if [src_interface] {
      translate {
        field => "src_interface"
        destination => "src_interface"
        override    => true
        fallback    => "%{src_interface}"
        add_field   => { "[@metadata][src_interface_translate_ok]" => true }
        dictionary_path => '${LS_ETC_BASE:/etc/logstash}/includes/firewall-src_interface-to-src_interface_description.yml'
        # 300 seconds is the default as of Logstash 5.5.
        refresh_interval => 3600
      }
      if ![@metadata][src_interface_translate_ok] {
        mutate { add_tag => [ "_src_interface_translatefailure" ] }
      } else {
        mutate { lowercase => [ "src_interface" ] }
      }
    }

    mutate {
      copy => {
        "src_ip" => "#src_hostname"
        "dst_ip" => "#dst_hostname"
      }
    }
    if [src_ip] {
      cidr {
        add_tag => [ "src_ip_rfc_1918" ]
        address => [ "%{src_ip}" ]
        network => [ "192.168.0.0/16", "172.16.0.0/12", "10.0.0.0/8" ]
      }
      if "src_ip_rfc_1918" in [tags] {
        dns {
          reverse => [ "#src_hostname"]
          action => "replace"
          hit_cache_size => 10000
          hit_cache_ttl => 3600
        }
      } else {
        geoip {
          source => "src_ip"
          target => "src_ip_geo"
          fields => [
            "location",
            "city_name",
            "continent_code",
            # "country_code2",
            "country_code3",
            "country_name"
            # "dma_code",
            # "ip",
            # "latitude",
            # "longitude",
            # "postal_code",
            # "region_name",
            # "timezone",
          ]
        }
      }
    }
    if [dst_ip] {
      cidr {
        add_tag => [ "dst_ip_rfc_1918" ]
        address => [ "%{dst_ip}" ]
        network => [ "192.168.0.0/16", "172.16.0.0/12", "10.0.0.0/8" ]
      }
      if "dst_ip_rfc_1918" in [tags] {
        dns {
          reverse => [ "#dst_hostname"]
          action => "replace"
          hit_cache_size => 10000
          hit_cache_ttl => 3600
        }
      } else {
        geoip {
          source => "dst_ip"
          target => "dst_ip_geo"
          fields => [
            "location",
            "city_name",
            "continent_code",
            "country_code3",
            "country_name"
          ]
        }
      }
    }
  }
}
